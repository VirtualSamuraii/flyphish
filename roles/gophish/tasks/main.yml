# Tasks to install and configure Gophish with a LetsEncrypt TLS certificate

- name: Install Go
  register: install_go
  ansible.builtin.apt:
    name: golang
    update_cache: true

- name: Git clone
  register: clone_gophish
  ansible.builtin.git:
    repo: https://github.com/gophish/gophish.git
    dest: "{{ ansible_env.HOME }}/gophish"
    force: true
  when: install_go is not failed

- name: Remove IOCs
  register: remove_iocs_gophish
  vars:
    src: "files/remove_iocs.sh"
    dst: "{{ ansible_env.HOME }}/remove_iocs.sh"
    chdir: "{{ ansible_env.HOME }}/gophish"
  ansible.builtin.include_tasks:
    file: tasks/copyrun.yml
  when: clone_gophish is not failed

- name: Build
  register: build_gophish
  ansible.builtin.shell: go build
  args:
    chdir: "{{ ansible_env.HOME }}/gophish"
  when: remove_iocs_gophish is not failed

- name: Configure
  register: configure_gophish
  ansible.builtin.template:
    src: files/config.json
    dest: "{{ ansible_env.HOME }}/gophish/config.json"
    mode: 0644
  when: build_gophish is not failed

- name: Generate TLS certificate
  register: generate_tls_certificate_gophish
  vars:
    domain: "{{ phishing_domain }}"
  ansible.builtin.include_tasks:
    file: tasks/certbot.yml
  when: configure_gophish is not failed

- name: Ensure postfix is installed.
  package:
    name: postfix
    state: present

- name: Update Postfix configuration.
  lineinfile:
    dest: "{{ postfix_config_file }}"
    line: "{{ item.name }} = {{ item.value }}"
    regexp: "^{{ item.name }} ="
    mode: 0644
  with_items:
    - name: myhostname
      value: "{{ sender_domain }}" 
    - name: myorigin
      value: "{{ sender_domain }}" 
    - name: mydestination
      value: "localhost.localdomain, localhost" 
    - name: inet_interfaces
      value: "{{ postfix_inet_interfaces }}"
    - name: inet_protocols
      value: "{{ postfix_inet_protocols }}"

- name: Add OpenDKIM settings to Postfix Conf
  blockinfile:
    path: /etc/postfix/main.cf
    block: |
      milter_protocol = 2
      milter_default_action = accept
      smtpd_milters = inet:localhost:8891
      non_smtpd_milters = inet:localhost:8891

- name: Remove IOCs from Postfix
  copy:
    dest: /etc/postfix/header_checks
    content: |
      /^Received:.*/    head      IGNORE
      /^X-Originating-IP:/    IGNORE
      /^X-Mailer:/            IGNORE
      /^Mime-Version:/        IGNORE

- name: Add email header checks to Postfix conf
  lineinfile:
    path: /etc/postfix/master.cf
    line: "  -o header_checks=regexp:/etc/postfix/header_checks"


- name: Install OpenDKIM packages
  apt:
    pkg:
    - opendkim
    - opendkim-tools

- name: Prepare OpenDKIM Configuration
  shell: |
    adduser opendkim ssl-cert
    mkdir -p /etc/opendkim/keys

- name: Update OpenDKIM Conf file
  copy:
    src: ../files/opendkim.conf
    dest: /etc/opendkim.conf
    owner: opendkim
    group: opendkim
    mode: '0644'
    force: true

- name: Configure OpenDKIM
  shell: |
    opendkim-genkey -h sha256 -b 4096 -D /etc/opendkim/keys/ -s mail
    touch /etc/opendkim/domains_whitelist && echo "{{phishing_domain}}" > /etc/opendkim/domains_whitelist
    touch /etc/opendkim/hosts_whitelist && echo "127.0.0.1" > /etc/opendkim/domains_whitelist
    chown -R opendkim:opendkim /etc/opendkim

- name: Reload service postfix
  systemd:
    name: postfix
    state: reloaded

- name: Ensure postfix is started and enabled at boot.
  service:
    name: postfix
    state: started
    enabled: true

- name: Ensure opendkim is started and enabled at boot
  ansible.builtin.systemd:
    name: opendkim
    state: started
    enabled: true

- name: Add this public key to the DNS in order to sign e-mails 
  command: cat mail.txt chdir=/etc/opendkim/keys
  register: command_output

- name: Print to console
  debug:
    msg: "{{command_output.stdout}}"